{"version":3,"sources":["reportWebVitals.js","index.js","App.js","components/ResultView.jsx","components/Keyboard.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","output","history","symbols","useState","displayValue","state","setState","updateState","toString","onClick","id","keyType","value","lastInput","slice","functionKey","operatorKey","numberKey","resetOutput","display","calculate","includes","eval","replace","Number","isInteger","toFixed","FileSaver","require","blob","Blob","type","saveAs","error","className","ResultView","colorStyle","color","style","keys","class","Keyboard","map","key"],"mappings":"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","file":"static/js/main.69803833.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, {useState} from 'react';\r\nimport { saveAs } from 'file-saver';\r\nimport './App.css';\r\nimport ResultView from './components/ResultView';\r\nimport Keyboard from './components/Keyboard';\r\n\r\nlet output = '';\r\nlet history = '';\r\nlet symbols = ['*', '-', '+', '/'];\r\n\r\nfunction App() {\r\n    const [state, setState] = useState({\r\n        history: '',\r\n        displayValue: ''\r\n    });\r\n    const updateState = () => {\r\n        setState({history: history.toString(), displayValue: output.toString()});\r\n    };\r\n\r\n    // ONCLICK BUTTON CLICK\r\n    const onClick = (id, keyType, value) => {\r\n        // CONVERT TO STRING\r\n        output = output.toString();\r\n        // GET LAST INPUT VALUE\r\n        let lastInput = output.slice(-1);\r\n\r\n        switch (keyType) {\r\n            case 'function':\r\n                functionKey(id, lastInput);\r\n                break;\r\n            case 'operator':\r\n                operatorKey(value, lastInput);\r\n                break;\r\n            case 'number':\r\n                numberKey(value, lastInput);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    const functionKey = (id, lastInput) => {\r\n        const resetOutput = display => {\r\n            // RESET VALUES\r\n            history = '';\r\n            output = '';\r\n            // Update state if display == true\r\n            display && updateState();\r\n        };\r\n        const calculate = lastInput => {\r\n            // CHECK IF LAST INPUT IS NUMBER AND OUTPUT IS NOT EMPTY\r\n            if (!symbols.includes(lastInput) && output) {\r\n                try {\r\n                    history = output;\r\n                    output = eval(output.replace(/%/g, '*0.01'));\r\n                    output = Number.isInteger(output) ? output : output.toFixed(3);\r\n                    updateState();\r\n                    let FileSaver = require('file-saver');\r\n                    let blob = new Blob([output], {type: \"text/plain;charset=utf-8\"});\r\n                    FileSaver.saveAs(blob, \"result.txt\");\r\n                    /*const element = document.createElement(\"a\");\r\n                    const textFile = new Blob(output, {type: 'text/plain'}); //pass data from localStorage API to blob\r\n                    element.href = URL.createObjectURL(textFile);\r\n                    element.download = \"result.txt\";\r\n                    document.body.appendChild(element);\r\n                    element.click();*/\r\n                    // UPDATE HISTORY TO RESULT AND RESET OUTPUT\r\n                    history = output;\r\n                    output = '';\r\n                } catch (error) {\r\n                    output = 'Error';\r\n                    updateState();\r\n                    resetOutput();\r\n                }\r\n            }\r\n        };\r\n\r\n        switch (id) {\r\n            case 'clear':\r\n                resetOutput(true);\r\n                break;\r\n            case 'clearBack':\r\n                output = output.slice(0, -1);\r\n                updateState();\r\n                break;\r\n            case 'calc':\r\n                calculate(lastInput);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    const operatorKey = (value, lastInput) => {\r\n        // PREVENT STARTING WITH AN OPERATOR\r\n        if (output === '' && value !== '-') {\r\n            return;\r\n        } else {\r\n            // REPLACE OPERATOR SYMBOL IF LASTINPUT IS OPERATOR\r\n            symbols.includes(lastInput)\r\n                ? (output = output.slice(0, -1) + value)\r\n                : (output += value);\r\n        }\r\n        updateState();\r\n    };\r\n    const numberKey = (value, lastInput) => {\r\n        // PREVENT ENTERING . OR % MULTIPY TIMES\r\n        if (value === '.' || value === '%') {\r\n            // PREVENT STARTING WITH '%'\r\n            if (output === '' && value === '%') return;\r\n            lastInput === '.' || lastInput === '%' || (output += value);\r\n        } else {\r\n            output += value;\r\n        }\r\n        updateState();\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"container\">\r\n                <ResultView history={state.history} output={state.displayValue}/>\r\n                <Keyboard onClick={onClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ResultView({ history, output }) {\r\n    // CHANGE COLOR TO RED IF ERROR OCCURRED\r\n    let colorStyle = {\r\n        color: output === 'Error' ? '#f11' : '#fff'\r\n    };\r\n\r\n    return (\r\n        <div style={colorStyle} className=\"result\">\r\n            <div className=\"history\">{history}</div>\r\n            <div className=\"output\">{output}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nResultView.propTypes = {\r\n    history: PropTypes.string,\r\n    output: PropTypes.string\r\n};\r\n\r\nexport default ResultView;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst keys = [\r\n    { id: 'clear', class: 'function', value: 'C' },\r\n    { id: 'clearBack', class: 'function', value: 'CE' },\r\n    { id: 'multiply', class: 'operator', value: '*' },\r\n    { id: '9', class: 'number', value: '9' },\r\n    { id: '8', class: 'number', value: '8' },\r\n    { id: '7', class: 'number', value: '7' },\r\n    { id: 'minus', class: 'operator', value: '-' },\r\n    { id: '6', class: 'number', value: '6' },\r\n    { id: '5', class: 'number', value: '5' },\r\n    { id: '4', class: 'number', value: '4' },\r\n    { id: 'add', class: 'operator', value: '+' },\r\n    { id: '3', class: 'number', value: '3' },\r\n    { id: '2', class: 'number', value: '2' },\r\n    { id: '1', class: 'number', value: '1' },\r\n    { id: 'divide', class: 'operator', value: '/' },\r\n    { id: 'dot', class: 'number', value: '.' },\r\n    { id: '0', class: 'number', value: '0' },\r\n    { id: '%', class: 'number', value: '%' },\r\n    { id: 'calc', class: 'function', value: '=' }\r\n];\r\n\r\nfunction Keyboard({ onClick }) {\r\n    return (\r\n        <div className=\"keyboard\">\r\n            {keys.map(key => (\r\n                <div\r\n                    className=\"btn\"\r\n                    id={key.id}\r\n                    key={key.id}\r\n                    onClick={() => onClick(key.id, key.class, key.value)}\r\n                >\r\n                    {key.value}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nKeyboard.propTypes = {\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default Keyboard;"],"sourceRoot":""}